// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â©Hilaludin Wahid

//@version=5
indicator("Metode SnD", overlay = true, max_lines_count = 500, max_boxes_count = 500)

// === INPUT
bodyHealthInput = input.int(70, "Candle Health %", minval = 1, maxval = 100)
baseRetracement = input.float(0.80, "Base Max Retracement", minval = 0.1, maxval = 1)
ma_len = input.int(9, "Multi-Timeframe EMA Parameter")

// === EMA MULTI TIMEFRAME
emaW = request.security(syminfo.tickerid, "W", ta.ema(close, ma_len))
emaD = request.security(syminfo.tickerid, "D", ta.ema(close, ma_len))
emaH4 = request.security(syminfo.tickerid, "240", ta.ema(close, ma_len))
emaH1 = request.security(syminfo.tickerid, "60", ta.ema(close, ma_len))

plot(emaW, "EMA Weekly", color=color.new(color.blue, 0), linewidth=2)
plot(emaD, "EMA Daily", color=color.new(color.orange, 0), linewidth=2)
plot(emaH4, "EMA 4H", color=color.new(color.purple, 0), linewidth=2)
plot(emaH1, "EMA 1H", color=color.new(color.green, 0), linewidth=2)

// === EMA 20/50/100/200 (CURRENT TF)
ema20 = ta.ema(close, 20)
ema50 = ta.ema(close, 50)
ema100 = ta.ema(close, 100)
ema200 = ta.ema(close, 200)

plot(ema20, title="EMA 20", color=color.red)
plot(ema50, title="EMA 50", color=color.orange)
plot(ema100, title="EMA 100", color=color.aqua)
plot(ema200, title="EMA 200", color=color.blue)

// === SUPPLY & DEMAND CODE
var float bullLow1 = na 
var float bullLow2 = na 
var float bullHigh = na 
var int bullPass = 0
var int bullLineX1 = na 

var float bearHigh1 = na 
var float bearHigh2 = na 
var float bearLow = na 
var int bearPass = 0
var int bearLineX1 = na  

bool bullPattern = na
bool bearPattern = na 

var int activePattern = na
var int bullFinalLoopIndex = na 

var int bullLeft = na 
var int bullRight = na 
var float bullTop = na 
var float bullBottom = na 
var int bearLeft = na 
var int bearRight = na 
var float bearTop = na 
var float bearBottom = na

var bullHighArray = array.new_float()
var bullLow1Array = array.new_float()
var bullLow2Array = array.new_float()
var bullLineX1Array = array.new_int()

var bearLowArray = array.new_float()
var bearHigh1Array = array.new_float()
var bearHigh2Array = array.new_float()
var bearLineX1Array = array.new_int()

bullCandle = close > open
bearCandle = close < open

a = high - low
b = math.abs(close - open)
bodyHealth = ((a - b) / a) * 100

bullHealthPass = 0
bearHealthPass = 0

// === BULLISH RBR ===
if bullCandle and close > high[1]
    if bullPass[1] < 2
        bullPass := 1

if bullPass == 1 and bearCandle
    for i = 1 to 10
        if bullCandle[i]
            array.push(bullLow1Array, open[i])
            array.push(bullHighArray, high[i])
            array.push(bullLineX1Array, bar_index[i])
            if bodyHealth[i] < (100 - bodyHealthInput)
                bullHealthPass += 1
        if bearCandle[i]
            break
    bullLow1 := array.min(bullLow1Array)
    bullLineX1 := array.min(bullLineX1Array)
    if bullHealthPass > 0
        if close > bullLow1
            array.push(bullHighArray, high)
            bullPass := 2
            bullFinalLoopIndex := bar_index
            bullLeft := bar_index - 1
            bullRight := bar_index + 1
            bullTop := math.max(high, high[1])
            bullBottom := low
        else
            bullPass := 0
    else
        bullPass := 0

if bullPass == 2 and bearCandle and close < bullLow1
    bullPass := 0

if bullPass == 2 and bullCandle
    bullHigh := array.max(bullHighArray)
    if close < bullHigh
        bullPass := 3
        bullBottom := low[1]
    else if close > bullHigh
        bullPass := 1
        for i = 0 to (bar_index - bullFinalLoopIndex)
            array.push(bullLow2Array, low[i])
        bullLow2 := array.min(bullLow2Array)
        if bullLow2 > bullLow1 + (bullHigh - bullLow1) * (1 - baseRetracement)
            bullPattern := true
            activePattern := 1
            box.new(bullLeft, bullTop, bar_index, bullBottom, bgcolor=color.new(color.green, 60), border_color=na)
            line.new(bullLineX1, bullLow1, bar_index, bullLow1, color=color.green)
            line.new(bar_index, bullLow1, bar_index, low, color=color.green, style=line.style_dashed)

if bullPass == 3 and bearCandle
    bullPass := 0

if bullPass == 3 and bullCandle and close > bullHigh
    bullPass := 1
    for i = 0 to (bar_index - bullFinalLoopIndex)
        array.push(bullLow2Array, low[i])
    bullLow2 := array.min(bullLow2Array)
    if bullLow2 > bullLow1 + (bullHigh - bullLow1) * (1 - baseRetracement)
        bullPattern := true
        activePattern := 1
        box.new(bullLeft, bullTop, bar_index, bullBottom, bgcolor=color.new(color.green, 60), border_color=na)
        line.new(bullLineX1, bullLow1, bar_index, bullLow1, color=color.green)
        line.new(bar_index, bullLow1, bar_index, low, color=color.green, style=line.style_dashed)

if bullPass == 1
    array.clear(bullHighArray)
    array.clear(bullLow1Array)
    array.clear(bullLow2Array)
    array.clear(bullLineX1Array)

// === BEARISH DBD ===
if bearCandle and close < low[1]
    if bearPass[1] < 2
        bearPass := 1

if bearPass == 1 and bullCandle
    for i = 1 to 10
        if bearCandle[i]
            array.push(bearHigh1Array, open[i])
            array.push(bearLowArray, low[i])
            array.push(bearLineX1Array, bar_index[i])
            if bodyHealth[i] < (100 - bodyHealthInput)
                bearHealthPass += 1
        if bullCandle[i]
            break
    bearHigh1 := array.max(bearHigh1Array)
    bearLineX1 := array.min(bearLineX1Array)
    if bearHealthPass > 0
        if close < bearHigh1
            array.push(bearLowArray, low)
            bearPass := 2
            bullFinalLoopIndex := bar_index
            bearLeft := bar_index - 1
            bearRight := bar_index + 1
            bearTop := high
            bearBottom := math.min(low, low[1])
        else
            bearPass := 0
    else
        bearPass := 0

if bearPass == 2 and bullCandle and close > bearHigh1
    bearPass := 0

if bearPass == 2 and bearCandle
    bearLow := array.min(bearLowArray)
    if close > bearLow
        bearPass := 3
        bearTop := high[1]
    else if close < bearLow
        bearPass := 1
        for i = 0 to (bar_index - bullFinalLoopIndex)
            array.push(bearHigh2Array, high[i])
        bearHigh2 := array.max(bearHigh2Array)
        if bearHigh2 < bearHigh1 - (bearHigh1 - bearLow) * (1 - baseRetracement)
            bearPattern := true
            activePattern := -1
            box.new(bearLeft, bearTop, bar_index, bearBottom, bgcolor=color.new(color.red, 60), border_color=na)
            line.new(bearLineX1, bearHigh1, bar_index, bearHigh1, color=color.red)
            line.new(bar_index, bearHigh1, bar_index, high, color=color.red, style=line.style_dashed)

if bearPass == 3 and bullCandle
    bearPass := 0

if bearPass == 3 and bearCandle and close < bearLow
    bearPass := 1
    for i = 0 to (bar_index - bullFinalLoopIndex)
        array.push(bearHigh2Array, high[i])
    bearHigh2 := array.max(bearHigh2Array)
    if bearHigh2 < bearHigh1 - (bearHigh1 - bearLow) * (1 - baseRetracement)
        bearPattern := true
        activePattern := -1
        box.new(bearLeft, bearTop, bar_index, bearBottom, bgcolor=color.new(color.red, 60), border_color=na)
        line.new(bearLineX1, bearHigh1, bar_index, bearHigh1, color=color.red)
        line.new(bar_index, bearHigh1, bar_index, high, color=color.red, style=line.style_dashed)

if bearPass == 1
    array.clear(bearLowArray)
    array.clear(bearHigh1Array)
    array.clear(bearHigh2Array)
    array.clear(bearLineX1Array)

// === PLOT SHAPE & ALERT
bullFirst = activePattern == 1 and activePattern[1] == -1
bearFirst = activePattern == -1 and activePattern[1] == 1

plotshape(bullFirst, title = "Bull Pattern", style = shape.labelup, color = color.green, location = location.belowbar, size = size.tiny, text = "RBR", textcolor = color.white)
plotshape(bearFirst, title = "Bear Pattern", style = shape.labeldown, color = color.red, location = location.abovebar, size = size.tiny, text = "DBD", textcolor = color.white)

alertcondition(bullPattern, title = "All Bullish(RBR) Pattern", message = "RBR")
alertcondition(bearPattern, title = "All Bearish(DBD) Pattern", message = "DBD")
alertcondition(bullFirst, title = "First Bullish(RBR) Pattern", message = "1st RBR")
alertcondition(bearFirst, title = "First Bearish(DBD) Pattern", message = "1st DBD")
